// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  googleId      String?   @map("google_id")
  roleId        Int       @default(1) @map("role_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  lastAppAccess DateTime? @map("last_app_access")

  role          Role            @relation(fields: [roleId], references: [id])
  SubjectAccess SubjectAccess[]
  ContentAccess ContentAccess[]
  SubjectStudy  SubjectStudy[]
  TopicStudy    TopicStudy[]
  TopicAccess   TopicAccess[]

  @@map("users")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  User User[]

  @@map("roles")
}

model Subject {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  topics        Topic[]
  SubjectAccess SubjectAccess[]
  SubjectStudy  SubjectStudy[]

  @@map("subjects")
}

model Topic {
  id          String   @id @default(uuid())
  subjectId   String   @map("subject_id")
  name        String
  description String
  position    Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  subject     Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Content     Content[]
  TopicStudy  TopicStudy[]
  TopicAccess TopicAccess[]

  @@map("topics")
}

model Content {
  id              String   @id @default(uuid())
  topicId         String   @map("topic_id")
  name            String
  description     String
  url             String
  type            String
  publicationDate DateTime @map("publication_date")
  duration        Int
  tumbnailUrl     String?  @map("thumbnail_url")
  isFree          Boolean  @default(false) @map("is_free")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")

  topic         Topic           @relation(fields: [topicId], references: [id], onDelete: Cascade)
  ContentAccess ContentAccess[]

  @@map("contents")
}

model SubjectAccess {
  userId     String   @map("user_id")
  subjectId  String   @map("subject_id")
  lastAccess DateTime @map("last_access")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@id([userId, subjectId])
  @@map("subject_access")
}

model ContentAccess {
  userId     String   @map("user_id")
  contentId  String   @map("content_id")
  lastAccess DateTime @map("last_access")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@id([userId, contentId])
  @@map("content_access")
}

model TopicAccess {
  userId     String   @map("user_id")
  topicId    String   @map("topic_id")
  lastAccess DateTime @map("last_access")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([userId, topicId])
  @@map("topic_access")
}

model SubjectStudy {
  userId     String    @map("user_id")
  subjectId  String    @map("subject_id")
  status     String // "in_progress", "completed"
  startedAt  DateTime  @default(now()) @map("started_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")
  finishedAt DateTime? @map("finished_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@id([userId, subjectId])
  @@map("subject_study")
}

model TopicStudy {
  userId     String    @map("user_id")
  topicId    String    @map("topic_id")
  status     String // "completed"
  startedAt  DateTime  @default(now()) @map("started_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")
  finishedAt DateTime? @map("finished_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([userId, topicId])
  @@map("topic_study")
}
