// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  googleId      String?   @map("google_id")
  roleId        Int       @default(1) @map("role_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  lastAppAccess DateTime? @map("last_app_access")

  Session Session[]
  role    Role      @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  User User[]

  @@map("roles")
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")
  provider  String   @default("local")

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Subject {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  topics Topic[]

  @@map("subjects")
}

model Topic {
  id          String   @id @default(uuid())
  subjectId   String   @map("subject_id")
  name        String
  description String
  position    Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  subject Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Content Content[]

  @@map("topics")
}

model Content {
  id              String   @id @default(uuid())
  topicId         String   @map("topic_id")
  name            String
  description     String
  url             String
  type            String
  publicationDate DateTime @map("publication_date")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@map("contents")
}
